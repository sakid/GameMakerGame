<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_wall</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>parent_wall</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>wall_tex = sprite_get_texture(sprite_index,0);
height=128;

/*left=0;right=0;up=0;down=0;

//This checks through all other walls to see if they are adjacent to the current wall
//https://www.reddit.com/r/gamemaker/comments/31d4qx/detecting_multiple_collisions/
var cnum, ID, num;
num = instance_number(o_wall);
if(collision_line(x,y,o_player.x,o_player.y,o_wall,false,true)){
    for(cnum = 0; cnum &lt;= num; cnum += 1){
        ID = instance_find(o_wall, cnum);
        if rectangle_in_rectangle(x-1,y-1,x+sprite_width+1,y+sprite_height+1,ID.x,ID.y,ID.x+ID.sprite_width,ID.y+ID.sprite_height)!=0{
            if (rectangle_in_rectangle(x+sprite_width,y,x+(sprite_width*2),y+sprite_height,ID.x,ID.y,ID.x+ID.sprite_width,ID.y+ID.sprite_height)==1) right=1;
            if (rectangle_in_rectangle(x,y,x-sprite_width,y+sprite_height,ID.x,ID.y,ID.x+ID.sprite_width,ID.y+ID.sprite_height)==1) left=1;
            if (rectangle_in_rectangle(x,y,x+sprite_width,y-sprite_height,ID.x,ID.y,ID.x+ID.sprite_width,ID.y+ID.sprite_height)==1) up=1;
            if (rectangle_in_rectangle(x,y+sprite_height,x+sprite_width,y+(sprite_height*2),ID.x,ID.y,ID.x+ID.sprite_width,ID.y+ID.sprite_height)==1) down=1;
        }  
    }
}

show_debug_message(" right: "+string(right)+" left: "+string(left)+" up: "+string(up)+" down: "+string(down));*/

transp=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if (transp&lt;1){
    draw_set_alpha(transp);
    if left==0 {d3d_draw_wall(x,y,0, x,y+32,32, wall_tex,1,1);}
    if up==0 {d3d_draw_wall(x,y,0, x+32,y,32, wall_tex,1,1);}
    if right==0 {d3d_draw_wall(x+32,y,0, x+32,y+32,32, wall_tex,1,1);}
    if down==0 {d3d_draw_wall(x,y+32,0, x+32,y+32,32, wall_tex,1,1);}
    d3d_draw_floor(x,y,32,x+32,y+32,32,wall_tex,1,1);
    draw_set_alpha(1); transp=1;
}
else if (transp==1) { 

draw_set_alpha(transp);*/
d3d_draw_block(x,y,0, x+32,y+32,height, wall_tex,1,4);
//draw_set_alpha(1); transp=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
